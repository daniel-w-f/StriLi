--[[
Class: RowFrame

variables:
	frame
	frameName
	parentFrame
	raidMember | looks like: {[1]=CharName,[2]={[1]="CLASS",["Main"]=count,["Sec"]=count,["Token"]=count,["Fail"]=count,["Reregister"]=""}}
	Children
		.Name
		.Reregister
		.Main
		.Sec
		.Token
		.Fail
	Regions
		.NameFS
		.ReregisterCB
		.MainCounter
		.MainCounterFS
		.SecCounter
		.SecCounterFS
		.TokenCounter
		.TokenCounterFS
		.FailCounter
		.FailCounterFS
	posIndex
	x_offset
	y_offset
	hight

methods:
	--can be called-- 
	new
	redraw
	setPosIndex
	UpdateName
	UpdateMainCounter
	UpdateSecCounter
	UpdateTokenCounter
	UpdateFailCounter
	OnValueChanged
	hide
	show
	toggle
	getName
	getY_offset
	getX_offset
	getHight
	onMouseUp_Name
	
	--for local use only--	
	setColumnContent
	linkCounter
	

--]]

--[[
	Dependencies:
		- observableNumber
		
--]]

RowFrame = {frame=nil, frameName=nil, parentFrame=nil, posIndex=nil, raidMember=nil, Children={}, Regions={}, x_offset=35, y_offset=-35,hight=30}

function RowFrame:new(o ,frameName ,parentFrame ,posIndex , raidMember)

	o = o or {};
	setmetatable(o, self);
	self.__index = self;
	
	self.frameName=frameName;
	self.parentFrame=parentFrame;
	self.posIndex = posIndex;
	self.raidMember = raidMember;
	
	self.frame=CreateFrame("Frame", self.frameName, self.parentFrame, "StriLi_Row_Template");
	self.frame:SetPoint("TOPLEFT", self.parentFrame, "TOPLEFT", self.x_offset, self.y_offset - self.posIndex*self.hight);
	
	self:setColumnContent(self.raidMember[1],self.raidMember[2]);	
	
	return o;
	
end

function RowFrame:reInit(o ,frameName ,parentFrame ,posIndex , raidMember)

	o = nil
	
	self:unlinkCounters(self.raidMember[2]); --stop observing old Data

	self.posIndex = posIndex;
	self.raidMember = raidMember;

	self.frame:SetPoint("TOPLEFT", self.parentFrame, "TOPLEFT", self.x_offset, self.y_offset - self.posIndex*self.hight);
	
	self:UpdateName(self.raidMember[1]);
	self:UpdateMainCounter(self.raidMember[2][1]);
	self:UpdateSecCounter(self.raidMember[2][2]);
	self:UpdateTokenCounter(self.raidMember[2][3]);
	self:UpdateFailCounter(self.raidMember[2][4]);
	
	self:linkCounter(self.raidMember[2]);
	
	return self;
	
end

function RowFrame:setColumnContent(charName, charData)

	self.Children.Name, self.Children.Reregister, self.Children.Main, self.Children.Sec, self.Children.Token, self.Children.Fail = self.frame:GetChildren();
	
	--Seting Playername
	self.Regions.NameFS = self.Children.Name:CreateFontString("PlayerName"..tostring(self.posIndex),"ARTWORK", "GameFontNormal");
	self.Regions.NameFS:SetPoint("LEFT", 0, 0);
	self.Regions.NameFS:SetPoint("RIGHT", 0, 0);
	self.Regions.NameFS:SetText(charName);
	
	StriLi_SetTextColorByClass(self.Regions.NameFS, charData[1]); --TODO: where to implement this funktion?
	
	-- Creating Checkbox. Toolotip added if Reregistered
	self.Regions.ReregisterCB = CreateFrame("CheckButton", "ReRegisterCheckButton"..tostring(self.posIndex), self.Children.Reregister, "ChatConfigCheckButtonTemplate");
	self.Regions.ReregisterCB:SetPoint("CENTER", 0, 0);
	self.Regions.ReregisterCB:SetHitRectInsets(0, 0, 0, 0);
	if(charData["Reregister"] ~= "") then 
		self.Regions.ReregisterCB:SetChecked(true);
		self.Children.Name:SetScript("OnEnter", 	function()
												GameTooltip_SetDefaultAnchor( GameTooltip, self.Children.Name )
												GameTooltip:SetOwner(self.Children.Name,"ANCHOR_NONE")
												GameTooltip:SetPoint("CENTER",self.Children.Name,"CENTER",0,30)
												GameTooltip:SetText( charData["Reregister"] )
												GameTooltip:Show()
											end);
		self.Children.Name:SetScript("OnLeave", 	function() GameTooltip:Hide() end );
	end
	self.Regions.ReregisterCB:SetScript("OnClick", function(frame) 
		if(frame:IsEnabled()) then 
			--HideUIPanel(StriLi_DropdownFrame);
	
			local Name, Reregister, Main, Sec, Token, Fail = StriLi_GetFrameForChar(arg1):GetChildren();
			local ReregisterCB = Reregister:GetChildren();	
			
			if not checked then 
				StriLi_TextInput("Gib den Spec an auf den Umgemeldet wird: ", function(argList, text) StriLi_Reregister(argList, text); StriLi_SendDataChanged(argList[1], "Reregister", text); end, function() ReregisterCB:SetChecked(false) end, {arg1, arg2});
			else
				StriLi_RaidMembers[arg1]["Reregister"] = "";
				
				StriLi_SendDataChanged(arg1, "Reregister", "");
				
				Name:SetScript("OnEnter", 	nil);
				Name:SetScript("OnLeave", 	function() GameTooltip:Hide() end);
			end
		end 
	end)
	
	-- Creating counters and initializing them
	self.Regions.MainCounter = CreateFrame("Frame", "CounterMain"..tostring(self.posIndex), self.Children.Main, StriLi_Template_Counter);
	self.Regions.SecCounter = CreateFrame("Frame", "CounterSec"..tostring(self.posIndex), self.Children.Sec, StriLi_Template_Counter);
	self.Regions.TokenCounter = CreateFrame("Frame", "CounterToken"..tostring(self.posIndex), self.Children.Token, StriLi_Template_Counter);
	self.Regions.FailCounter = CreateFrame("Frame", "CounterFail"..tostring(self.posIndex), self.Children.Fail, StriLi_Template_Counter);
	
	self:linkCounter(charData);
	
	self.Regions.MainCounterFS = self.Regions.MainCounter:GetRegions();
	self.Regions.SecCounterFS = self.Regions.SecCounter:GetRegions();
	self.Regions.TokenCounterFS = self.Regions.TokenCounter:GetRegions();
	self.Regions.FailCounterFS = self.Regions.FailCounter:GetRegions();
	
	self.Regions.MainCounterFS:SetText(tostring(charData["Main"]:get()))
	StriLi_ColorCounterCell(self.Children.Main, charData["Main"]:get(), false);
	
	self.Regions.SecCounterFS:SetText(tostring(charData["Sec"]:get()))
	StriLi_ColorCounterCell(self.Children.Sec, charData["Sec"]:get(), true);
	
	self.Regions.TokenCounterFS:SetText(tostring(charData["Token"]:get()))
	StriLi_ColorCounterCell(self.Children.Token, charData["Token"]:get(), false);
	
	self.Regions.FailCounterFS:SetText(tostring(charData["Fail"]:get()))
	StriLi_ColorCounterCell(self.Children.Fail, charData["Fail"]:get(), true);

end

function RowFrame:linkCounter(charData)

	for key, counter in {["Main"]=self.Regions.MainCounter, ["Sec"]=self.Regions.SecCounter, ["Token"]=self.Regions.TokenCounter, ["Fail"]=self.Regions.FailCounter} do
	
		local plusButton, minusButton = counter:GetChildren();
		plusButton:SetScript("OnClick", function() charData[key]:add(1) end)
		minusButton:SetScript("OnClick", function() charData[key]:sub(1) end)
		
		charData[key]:registerObserver(selfe);
		
	end
	
end

function RowFrame:unlinkCounter(charData)

	for key, counter in {["Main"]=self.Regions.MainCounter, ["Sec"]=self.Regions.SecCounter, ["Token"]=self.Regions.TokenCounter, ["Fail"]=self.Regions.FailCounter} do
		charData[key]:unregisterObserver(selfe);
	end
	
end

function RowFrame:UpdateName(name)
	self.Regions.NameFS:SetText(tostring(name));
end

function RowFrame:UpdateMainCounter(count)
	self.Regions.MainCounterFS:SetText(tostring(count));
end

function RowFrame:UpdateSecCounter(count)
	self.Regions.MainSecFS:SetText(tostring(count));
end

function RowFrame:UpdateTokenCounter(count)
	self.Regions.TokenCounterFS:SetText(tostring(count));
end

function RowFrame:UpdateFailCounter(count)
	self.Regions.FailCounterFS:SetText(tostring(count));
end

function RowFrame:redraw()
	self.frame:SetPoint("TOPLEFT", self.parentFrame, "TOPLEFT", self.x_offset, self.y_offset - self.posIndex*self.hight);
	StriLi_SetTextColorByClass(self.Regions.NameFS, self.raidMember[2][1]);
end

function RowFrame:setPosIndex(index)
	self.posIndex=index;
	self:redraw();
end

function RowFrame:OnValueChanged(sender)

	if sender==self.raidMember[2]["Main"] then
		self:UpdateMainCounter(self.raidMember[2]["Main"]);
		
	elseif sender==self.raidMember[2]["Sec"] then
		self:UpdateSecCounter(self.raidMember[2]["Sec"]);
		
	elseif sender==self.raidMember[2]["Token"] then
		self:UpdateTokenCounter(self.raidMember[2]["Token"]);
		
	elseif sender==self.raidMember[2]["Fail"] then
		self:UpdateFailCounter(self.raidMember[2]["Fail"]);
		
	elseif sender==self.raidMember[2]["Reregister"] then
		self:
	end
	
end

function RowFrame:show()
	ShowUIPanel(self.frame);
end

function RowFrame:hide()
	HideUIPanel(self.frame);
end

function RowFrame:toggle()

	if (self.frame:IsVisible()) then
		self:hide();
	else
		self:show();
	end
	
end	

function RowFrame:getName() return self.Regions.NameFS:GetText(); end
function RowFrame:getY_offset() return self.y_offset; end
function RowFrame:getX_offset() return self.x_offset; end
function RowFrame:getHight() return self.hight; end

function RowFrame:onMouseUp_Name(frame, button)

	if (button ~= "RightButton") or (not MouseIsOver(frame) or ((StriLi.master ~= "") and (StriLi.master ~= UnitName("player"))) ) then return end;
	
	StriLi.dropdownFrame = CreateFrame("Frame", "StriLi_DropdownFrame", frame, "UIDropDownMenuTemplate")
	-- Bind an initializer function to the dropdown;
	
	UIDropDownMenu_Initialize(StriLi.dropdownFrame, self.initDropdownMenu_PlayerNameFrame, "MENU")
	
	ToggleDropDownMenu(1, nil, StriLi.dropdownFrame, "cursor", 3, -3,nil,nil,0.2)
	
end

function RowFrame.initDropdownMenu_PlayerNameFrame(frame, level, menuList)

	local info = UIDropDownMenu_CreateInfo();

	if level == 1 then
	
		local pFrame = frame:GetParent();
		local _, fString = pFrame:GetRegions();
		local playerName = fString:GetText();
	
		-- Outermost menu level		
		info.text, info.hasArrow, info.menuList = "Zusammenlegen mit", true, "Players";
		UIDropDownMenu_AddButton(info);
		info.text, info.hasArrow, info.func, info.arg1 = "Ummeldung", false, StriLi_ReregisterRequest, playerName;
		UIDropDownMenu_AddButton(info);
		info.text, info.hasArrow, info.func, info.arg1 = "Zu Master ernennen", false, StriLi_SetMasterRequest, playerName;
		UIDropDownMenu_AddButton(info);
		
	elseif menuList == "Players" then
	
		local pFrame = frame:GetParent();
		local _, fString = pFrame:GetRegions();
		local playerName = fString:GetText();
		
		for k,v in pairs(StriLi_RaidMembers) do
			if (k ~= playerName) then
				info.text = k;
				info.colorCode = "|cff".. Strili_GetHexClassCollerCode(v[1])
				info.func = StriLi_CombineRaidmembersRequest;
				info.arg1 = playerName;
				info.arg2 = k;
				UIDropDownMenu_AddButton(info, level);
			end
		end 
	
	end

end